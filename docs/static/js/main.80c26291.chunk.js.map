{"version":3,"sources":["Display.js","Button.js","Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Display","string","this","props","data","join","react_default","a","createElement","className","Component","Button","onClick","data-size","size","data-value","value","label","Buttons","children","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","calculateOperations","result","state","operations","math","eval","format","precision","setState","handleClick","e","target","getAttribute","newOperations","update","$push","src_Display","src_Buttons","src_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80c26291.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nclass Display extends Component {\r\n  render() {\r\n    const string = this.props.data.join('')\r\n    return <div className=\"Display\"> {string} </div>\r\n  }\r\n}\r\nexport default Display","import React, { Component } from 'react'\r\nclass Button extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        onClick={this.props.onClick}\r\n        className=\"Button\"\r\n        data-size={this.props.size}\r\n        data-value={this.props.value}\r\n      >\r\n        {this.props.label}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Button","import React, { Component } from 'react'\r\n\r\nclass Buttons extends Component {\r\n  render() {\r\n    return <div className=\"Buttons\"> {this.props.children} </div>\r\n  }\r\n}\r\nexport default Buttons","import React, { Component } from 'react'\nimport update from 'immutability-helper'\nimport math from 'mathjs'\nimport './App.css'\nimport Display from './Display'\nimport Button from './Button'\nimport Buttons from './Buttons'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { operations: [] }\n  }\n\n  calculateOperations = () => {\n    let result = this.state.operations.join('')\n    if (result) {\n      result = math.eval(result)\n      result = math.format(result, { precision: 14 })\n      this.setState({\n        operations: [result],\n      })\n    }\n  }\n  handleClick = e => {\n    const value = e.target.getAttribute('data-value')\n    switch (value) {\n      case 'clear':\n        this.setState({\n          operations: [],\n        })\n        break\n      case 'equal':\n        this.calculateOperations()\n        break\n      default:\n        const newOperations = update(this.state.operations, {\n          $push: [value],\n        })\n        this.setState({\n          operations: newOperations,\n        })\n        break\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Display data={this.state.operations} />\n        <Buttons>\n          <Button onClick={this.handleClick} label=\"C\" value=\"clear\" />\n          <Button onClick={this.handleClick} label=\"7\" value=\"7\" />\n          <Button onClick={this.handleClick} label=\"4\" value=\"4\" />\n          <Button onClick={this.handleClick} label=\"1\" value=\"1\" />\n          <Button onClick={this.handleClick} label=\"0\" value=\"0\" />\n\n          <Button onClick={this.handleClick} label=\"/\" value=\"/\" />\n          <Button onClick={this.handleClick} label=\"8\" value=\"8\" />\n          <Button onClick={this.handleClick} label=\"5\" value=\"5\" />\n          <Button onClick={this.handleClick} label=\"2\" value=\"2\" />\n          <Button onClick={this.handleClick} label=\".\" value=\".\" />\n\n          <Button onClick={this.handleClick} label=\"x\" value=\"*\" />\n          <Button onClick={this.handleClick} label=\"9\" value=\"9\" />\n          <Button onClick={this.handleClick} label=\"6\" value=\"6\" />\n          <Button onClick={this.handleClick} label=\"3\" value=\"3\" />\n          <Button label=\"\" value=\"null\" />\n\n          <Button onClick={this.handleClick} label=\"-\" value=\"-\" />\n          <Button onClick={this.handleClick} label=\"+\" size=\"2\" value=\"+\" />\n          <Button onClick={this.handleClick} label=\"=\" size=\"2\" value=\"equal\" />\n        </Buttons>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}